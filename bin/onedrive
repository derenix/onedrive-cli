#!/usr/bin/env node

const RP = require('request-promise-native')
const Colors = require('colors')
const Moment = require('moment')
const FS = require('fs')
const Mime = require('mime')
const Path = require('path')
const Url = require('url')
const Crypto = require('crypto')
const Zlib = require('zlib')
const request = require('request')
const mkdirp = require('mkdirp');
const util = require('util');

const TOKEN_PATH = Path.join(require('os').homedir(), '.onedrive-cli-token')


function padLeft(str, len) {
    return String('                ' + str).slice(-len)
}


function padRight(str, len) {
    return str + ' '.repeat(len - str.length)
}


function readFile(filename) {
    return new Promise((resolve, reject) => {
        FS.readFile(filename, (err, data) => err ? reject(err) : resolve(data))
    })
}


function writeFile(filename, data) {
    return new Promise((resolve, reject) => {
        FS.writeFile(filename, data, err => err ? reject(err) : resolve())
    })
}


function print(data) {
    return new Promise((resolve, reject) => {
        process.stdout.write(data, err => err ? reject(err) : resolve())
    })
}


function unlink(path) {
    return new Promise((resolve, reject) => {
        FS.unlink(path, err => err ? reject(err) : resolve())
    })
}


function humanize(num) {
    const units = ["", "Ki", "Mi", "Gi", "Ti", "Pi"]
    var str, unit = "",
        div = 0
    for (;;) {
        var str = Math.round(num / Math.pow(1024, div))
        if (str <= 9999) {
            return str + units[div]
        }
        ++div
    }
}


function pp(num) {
    return padLeft(humanize(num), 6)
}


var lazyToken = function () {
    return readFile(TOKEN_PATH)
        .then(buffer => {
            const token = Promise.resolve(buffer.toString())
            // Next time we're invoked, simply return the resolved promise
            lazyToken = function () {
                return token;
            }
            return token
        })
}


function call(url, method, body, mime) {
    method = method || 'GET'
    console.error(Colors.yellow(method), url)
    var prefer
    var contentEncoding
    if (body instanceof Buffer) {
        body = Zlib.gzipSync(body)
        contentEncoding = 'gzip'
    } else if (typeof body === 'object') {
        if ("@content.sourceUrl" in body) {
            prefer = 'respond-async'
        }
        body = JSON.stringify(body)
        mime = 'application/json'
    }

    var options = {
        uri: url,
        body: body,
        method: method,
        headers: {
            'Content-Type': mime || 'application/octet-stream',
            'Content-Encoding': contentEncoding,
            Prefer: prefer
        }
    };

    if (!url.startsWith('https://api.onedrive.com')) {
        options.baseUrl = 'https://api.onedrive.com/v1.0/'
    }

    return lazyToken()
        .then(token => {
            options.headers.Authorization = 'bearer ' + token;
            return RP(options)
        })
        .then(data => {
            return data === '' ? null : JSON.parse(data)
        })
}


function getContent(url) {
    console.error(Colors.yellow('GET'), url)
    return lazyToken()
        .then(token => RP({
            baseUrl: 'https://api.onedrive.com/v1.0/',
            uri: url,
            headers: {
                Authorization: 'bearer ' + token
            }
        }))
}


function sanitize(remote) {
    remote = remote.replace(/^:?\/?/, ":/")
    return remote === ':/.' ? ':/' : remote
}


/*
Filesystem         Size   Used  Avail Capacity Deleted
dc1e3335a482dc20 1214Gi  164Gi 1050Gi      14%   780Mi
*/
function df() {
    return call('/drives')
        .then(result => {
            console.log(Colors.bold('Drive              Size   Used  Avail Capacity Deleted Status'))
            for (var i in result.value) {
                const drive = result.value[i]
                const capacity = Math.round(drive.quota.used * 100 / drive.quota.total) + '% '
                console.log(
                    padRight(drive.id, 16),
                    pp(drive.quota.total),
                    pp(drive.quota.used),
                    pp(drive.quota.remaining),
                    padLeft(capacity, 9),
                    pp(drive.quota.deleted),
                    drive.status.state)
            }
        })
}


function downloadFolder(args) {
    if (args.length !== 2) {
        console.error("usage: download-folder remote-folder local-folder");
        return;
    }

    const folder = args[0]
    let base = args[1];

    if (!base.endsWith("/")) {
        base += "/";
    }

    function downloadPage(url) {

        call(url).then(result => {
            let toDownload = result.value.length;
            let downloaded = 0;

            result.value.forEach(f => {
                const downloadUrl = f["@content.downloadUrl"];

                if (typeof downloadUrl === "undefined") {
                    console.log("Ignoring ", f.name);
                    toDownload--;
                    return;
                }

                const date = f.name.split("_")[0];
                const year = date.substring(0, 4);
                const month = date.substring(4, 6);
                const day = date.substring(6, 8);

                const datePath = [year, month, day, ""].join("/");

                mkdirp.sync(base + datePath);

                const toFilePath = base + datePath + f.name;

                if (FS.existsSync(toFilePath)) {

                    const stats = util.inspect(toFilePath);

                    if (stats.size === 0) {
                        console.warn("WARNING: File at ", toFilePath, "has 0B size. Deleting & downloading again.");
                        FS.unlinkSync(toFilePath);
                    } else {
                        console.log("File already exists: " + toFilePath);
                        toDownload--;

                        return;
                    }
                }

                const toFile = FS.createWriteStream(toFilePath);

                const sendReq = request.get(downloadUrl);

                // verify response code
                sendReq.on('response', function (response) {
                    if (response.statusCode !== 200) {
                        throw new Error('Response status was ' + response.statusCode);
                    }
                });

                // check for request errors
                sendReq.on('error', function (err) {
                    FS.unlink(toFilePath);
                    console.log("Unable to download file:", err);
                });

                sendReq.pipe(toFile);

                toFile.on('finish', function () {
                    toFile.close();
                    downloaded++;

                    if (downloaded % 10 === 0) {
                        const perc = downloaded * 100 / toDownload;
                        console.log(Colors.green(perc.toFixed(0) + "% done") + " (" + downloaded + "/" + toDownload + ")");
                    }
                });

                toFile.on('error', function (err) {
                    FS.unlink(toFilePath);
                    throw new Error("Unable to write file: ", err.message);
                });
            });

            console.log("Started ", toDownload, "downloads.");

            if (result['@odata.nextLink']) {
                let inter = setInterval(() => {
                    if (downloaded === toDownload) {
                        console.log("Downloading next page...");
                        downloadPage(result['@odata.nextLink']);
                        clearInterval(inter);
                    }
                }, 100);
            }
        });
    }

    downloadPage('/drive/root' + sanitize(folder) + ':/children');
}


function listPage(total, cont) {
    if (typeof cont === 'undefined') {
        return total
    }

    return call(cont)
        .then(result => {
            const now = Moment()
            const threshold = 1000 * 60 * 60 * 24 * 180 //180days
            for (var i in result.value) {
                const f = result.value[i]
                const m = Moment(f.lastModifiedDateTime)
                const d = "folder" in f
                var mod = d ? 'drwx' : '-rw-'
                if ("shared" in f) {
                    if ("effectiveRoles" in f.shared && f.shared.effectiveRoles.length === 1 &&
                        f.shared.effectiveRoles[0] === 'read') {
                        mod += d ? 'r-x' : 'r--'
                        if (f.shared.scope === 'anonymous') {
                            mod += d ? 'r-x' : 'r--'
                        } else {
                            mod += '---'
                        }
                    } else {
                        mod += d ? 'rwx' : 'rw-'
                        if (f.shared.scope === 'anonymous') {
                            mod += d ? 'rwx' : 'rw-'
                        } else {
                            mod += '---'
                        }
                    }
                } else {
                    mod += '------'
                }
                const count = d ? f.folder.childCount : 1
                total += count
                console.log(
                    mod,
                    padLeft(count, 3),
                    f.createdBy.user.displayName,
                    padLeft(f.size, 10),
                    m.format(Math.abs(now - m) < threshold ? 'MMM DD HH:mm' : 'MMM DD  YYYY'),
                    d ? Colors.bold(Colors.blue(f.name)) + '/' : f.name)
            }
            return listPage(total, result['@odata.nextLink'])
        })
}


function ls(folders) {
    if (folders.length === 0) {
        folders = ['']
    }

    //console.log(Colors.bold('Permission Cnt Owner            Size     Date         Name'))
    return folders.reduce((prevp, folder) =>
            prevp.then(prev => listPage(prev, '/drive/root' + sanitize(folder) + ':/children')),
            Promise.resolve(0))
        .then(result => "total " + result)
}



/*
PUT /drive/root:/{parent-path}/{filename}:/content
@name.conflictBehavior   fail, replace (def), or rename.
*/
function upload(copy, from, to) {
    if (from.endsWith('/')) {
        throw new Error("Invalid source name")
    }
    if (to.endsWith('/')) {
        to = to + Path.basename(from)
    }
    to = sanitize(to)
    const mime = Mime.lookup(from)
    return readFile(from)
        .then(data => {
            return call('/drive/root' + to + ':/content?@name.conflictBehavior=fail', 'PUT', data, mime)
                .then(result => {
                    const sha1 = Crypto.createHash("sha1").update(data).digest('hex')
                    if (sha1.toUpperCase() !== result.file.hashes.sha1Hash) {
                        throw new Error("sha1Hash mismatch: " + to)
                    }
                    return result
                })
        })
        .then(result => {
            if (copy === 'move') {
                console.log(from, '=>', to, result.id)
                return unlink(from)
            } else {
                console.log(from, '->', to, result.id)
            }
        })
        .catch(err => {
            if (err.statusCode === 404) {
                return console.error("Skipped. Uploads larger than 100MiB are not yet supported.")
            }
            throw err
        })
}


/*
POST /drive/items/{parent-item}/children
Content-Type: application/json
Prefer: respond-async

{
  "@content.sourceUrl": "http://wscont2.apps.microsoft.com/winstore/1x/e33e38d9-d138-42a1-b252-27da1924ca87/Screenshot.225037.100000.jpg",
  "name": "halo-screenshot.jpg",
  "file": { }
}
*/
function wget(args) {
    if (args.length < 2) {
        console.error("usage: wget url target")
    } else {
        var to = args.pop()
        const from = args[0].startsWith('http') ? args[0] : "http://" + args[0]
        const data = {
            "@content.sourceUrl": from,
            name: Path.basename(to),
            file: {}
        }
        if (data.name === '' || to.endsWith('/')) {
            throw new Error("Invalid target name")
        }
        var path = Path.dirname(to + "hack")
        to = sanitize(to)
        path = sanitize(path)
        return call('/drive/root' + path + ':/children', 'POST', data)
            .then(result => {
                console.log(from, '-->', to)
            })
    }
}


/*
GET /drive/root:/{path and filename}:/content
*/
function download(copy, from, to) {
    if (from.endsWith('/')) {
        throw new Error("Invalid source name")
    }
    if (typeof to === 'undefined' || to === '.' || to === '') {
        to = './'
    }
    if (to.endsWith('/')) {
        to = to + Path.basename(from)
    }
    from = sanitize(from)
    return getContent('/drive/root' + from + ':/content')
        .then(data => writeFile(to, data))
        .then(result => {
            if (copy === 'move') {
                console.log(from, '=>', to)
                return rm(from)
            } else {
                console.log(from, '->', to, result);
            }
        })
}



function cp_mv(copy, args) {
    const to = args.pop()

    if (args[0].startsWith(':/') && to.startsWith(':/')) {
        throw new Error(`Remote ${copy} is not implemented.`)
    } else if (args[0].startsWith('./') && to.startsWith('./')) {
        throw new Error(`Local ${copy} is not implemented.`)
    }

    if (args[0].startsWith('./') || to.startsWith(':/')) {
        // from local to onedrive
        return args.reduce((prevp, cur) => prevp.then(_ => upload(copy, cur, to)), Promise.resolve(0))
    } else if (args[0].startsWith(':/') || to.startsWith('./') || to === '.') {
        // from onedrive to local
        return args.reduce((prevp, cur) => prevp.then(_ => download(copy, cur, to)), Promise.resolve(0))
    } else {
        throw new Error('Use ./ or :/ path prefix for local or remote paths.')
    }
}


function cp(args) {
    if (args.length < 2) {
        console.error("usage: cp source target")
        console.error("       cp source ... directory")
    } else {
        return cp_mv('copy', args)
    }
}


function rm(args) {
    if (args.length < 1) {
        console.error("usage: rm file ...")
    } else {
        const to = args.pop()
        throw new Error("Remove is not implemented")
    }
}


function mv(args) {
    if (args.length < 2) {
        console.error("usage: mv source target")
        console.error("       mv source ... directory")
    } else {
        return cp_mv('move', args)
    }
}


function cat1(remote) {
    remote = sanitize(remote)
    return getContent('/drive/root' + remote + ':/content')
        .then(data => print(data))
}


function cat(args) {
    if (args.length < 1) {
        console.error("usage: cat file ...")
    } else {
        return args.reduce((prevp, cur) => prevp.then(_ => cat1(cur)), Promise.resolve())
    }
}


function loginUrl() {
    console.log("\nBrowse to",
        Colors.underline("https://login.live.com/oauth20_authorize.srf?client_id=0000000040197E82&scope=onedrive.readwrite&response_type=token&redirect_uri=http%3A%2F%2Fblog.enuma.io%2Fonedrive-cli%2Foauthcallbackhandler.html"))
}


function login(args) {
    const token = args.pop()
    if (typeof token === 'string') {
        return writeFile(TOKEN_PATH, token)
            .then(_ => "Access token was saved to " + TOKEN_PATH)
    } else {
        console.error("usage: login access_token")
        loginUrl()
    }
}


function ln(args) {
    if (args.length !== 1) {
        console.error("usage: ln file")
    } else {
        var remote = sanitize(args[0])
        return call('/drive/root' + remote + ':/action.createLink', 'POST', {
                "type": "view"
            })
            .then(result => {
                console.log(Colors.underline(result.link.webUrl))
            })
    }
}


function chmod1(mode, remote) {
    remote = sanitize(remote)
    return call('/drive/root' + remote + ':/permissions')
        .then(result => {
            // +w  x        POST (todo)
            // +w  read     PATCH (todo)
            // +w  write    NOP
            // -w  write    PATCH
            // -w  read     NOP
            // -rw write    DELETE
            // -rw read     DELETE
            return result.value.reduce((prevp, cur) => prevp.then(_ => {
                if (mode === '-rw') {
                    return call('/drive/root' + remote + ':/permissions/' + cur.id, 'DELETE')
                } else if (cur.roles[0] === 'write') {
                    // FIXME: generic 'edit' links cannot be patched to be read only
                    return call('/drive/root' + remote + ':/permissions/' + cur.id, 'PATCH', {
                        roles: ["read"]
                    })
                }
            }), Promise.resolve())
        })
        .then(s => s === null ? "OK" : "Nothing was changed")
}


function chmod(args) {
    if (args.length < 2) {
        console.error("usage: chmod mode file ...")
    } else {
        var mode = args[0]
        switch (mode) {

            case '0600':
            case '0700':
            case '600':
            case '700':
            case 'g-rw':
            case 'o-rw':
            case 'go-rw':
            case 'og-rw':
            case '-rw':
                mode = '-rw'
                break

            case '0644':
            case '0744':
            case '644':
            case '744':
            case 'g-w':
            case 'o-w':
            case 'go-w':
            case 'og-w':
            case '-w':
                mode = '-w'
                break

            default:
                console.error("chmod: Invalid file mode:", mode)
                return
        }

        return args.slice(1).reduce((prevp, cur) => prevp.then(_ => chmod1(mode, cur)), Promise.resolve())
    }
}


function main(argv) {

    switch (argv[2]) {

        case undefined:
        case 'help':
            console.log(Colors.bold("\nOneDrive Command Line Interface (c) Enuma Technologies Limited"))
            console.log("\nusage: onedrive COMMAND [arguments]\n\ncommands: cat chmod cp df download-folder help ln login ls mv rm wget")
            return

        case 'cat':
            return cat(argv.slice(3))

        case 'wget':
            return wget(argv.slice(3))

        case 'ls':
            return ls(argv.slice(3))

        case 'df':
            return df()

        case 'cp':
            return cp(argv.slice(3))

        case 'mv':
            return mv(argv.slice(3))

        case 'rm':
            return rm(argv.slice(3))

        case 'ln':
            return ln(argv.slice(3))

        case 'login':
            return login(argv.slice(3))

        case 'chmod':
            return chmod(argv.slice(3))

        case 'download-folder':
            return downloadFolder(argv.slice(3));

        default:
            throw new Error("Unknown command: " + argv[2])
    }
}


Promise.resolve()
    .then(_ => main(process.argv))
    .then(result => {
        if (typeof result !== 'undefined') {
            console.log(Colors.green(result))
        }
    })
    .catch(err => {
        console.error(Colors.red(err))
        // Special error handling case for fatal login failures
        if (err.statusCode === 401 || err.path === TOKEN_PATH) {
            loginUrl()
            // Exit with -1 to ensure xargs stops invoking us
            process.exit(-1)
        } else {
            process.exit(1)
        }
    })
